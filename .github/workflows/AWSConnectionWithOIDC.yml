name: FastAPI Deployment Pipeline

on:
  push:
    branches:
      - main

jobs:
  deploy-app:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Configure AWS credentials with OIDC and Assume Role
      - name: Configure AWS Credentials with OIDC
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.OIDC_ROLE }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: Create or Get ECR Repository
      - name: Create or Get ECR Repository
        id: ecr
        run: |
          REPO_NAME="my-fastapi-app"
          
          # Check if the repository already exists
          ECR_REPO_URI=$(aws ecr describe-repositories --repository-names $REPO_NAME --query 'repositories[0].repositoryUri' --output text 2>/dev/null || echo "NOT_FOUND")

          # If the repository doesn't exist, create it
          if [ "$ECR_REPO_URI" == "NOT_FOUND" ]; then
            aws ecr create-repository --repository-name $REPO_NAME
            ECR_REPO_URI=$(aws ecr describe-repositories --repository-names $REPO_NAME --query 'repositories[0].repositoryUri' --output text)
          fi

          echo "ECR_REPO_URI=$ECR_REPO_URI" >> $GITHUB_ENV

      # Step 4: Build Docker image
      - name: Build Docker image
        run: |
          docker build -t my-fastapi-app .
          docker tag my-fastapi-app:latest $ECR_REPO_URI:latest

      # Step 5: Log in to Amazon ECR and Push Docker image
      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REPO_URI

      - name: Push Docker image to Amazon ECR
        run: |
          docker push $ECR_REPO_URI:latest

      # Step 6: Deploy CloudFormation Stack with Application and Role
      - name: Deploy CloudFormation Stack with Application and Role
        run: |
          aws cloudformation deploy \
            --template-file cloudformation/deploy.yml \
            --stack-name fastapi-app-stack \
            --parameter-overrides ImageUrl=$ECR_REPO_URI:latest \
            --capabilities CAPABILITY_NAMED_IAM

      # Step 7: Retrieve TTS Role ARN After Creation
      - name: Retrieve TTS Role ARN
        run: |
          ROLE_NAME="tts-role"
          TTS_ROLE_ARN=$(aws iam get-role --role-name $ROLE_NAME --query "Role.Arn" --output text)

          # Export the ARN to be used by subsequent steps if necessary
          echo "TTS_ROLE_ARN=$TTS_ROLE_ARN" >> $GITHUB_ENV
